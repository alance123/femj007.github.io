<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Study and Share</title>
  
  <subtitle>Jinguo&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.dongjinguo.com/"/>
  <updated>2018-12-28T13:29:45.328Z</updated>
  <id>http://blog.dongjinguo.com/</id>
  
  <author>
    <name>Jinguo Dong (董金国)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QT5.12 C++与前端JS/HTML实现通信交互</title>
    <link href="http://blog.dongjinguo.com/2018-12-28/qtwithjs/"/>
    <id>http://blog.dongjinguo.com/2018-12-28/qtwithjs/</id>
    <published>2018-12-28T11:28:24.000Z</published>
    <updated>2018-12-28T13:29:45.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>&quot;WebSocket connection to &#39;ws://localhost:12345/&#39; failed: Error in connection establishment: net::ERR_CONNECTION_REFUSED&quot;</code><br>最近在公司实习，使用QT开发需要导出分析报告，选择使用HTML&amp;JS进行页面渲染，那么问题来了，如何实现 C++ QT 和 JavaScript 的通信呢？<br><a id="more"></a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>WebEngineView是 QT5 新提供的web通信方法，可以实现服务端监听本地端口和客户端实现数据交互。</p><p>参考 QT 5.12 官方文档： <a href="http://doc.qt.io/qt-5/qml-qtwebengine-webengineview.html" target="_blank" rel="noopener">WebEngineView QML Type</a></p><p>本篇博客将结合官方文档 StandAlone 示例以及自己实际开发中遇到的问题进行分析，如有不当之处欢迎批评指教。</p><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QFileInfo jsFileInfo(QDir::currentPath() + "/qwebchannel.js");</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!jsFileInfo.exists())</span><br><span class="line">        QFile::copy(<span class="string">":/qtwebchannel/qwebchannel.js"</span>,jsFileInfo.absoluteFilePath());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup the QWebSocketServer</span></span><br><span class="line">    QWebSocketServer server(QStringLiteral("QWebChannel Standalone Example Server"), QWebSocketServer::NonSecureMode);</span><br><span class="line">    <span class="keyword">if</span> (!server.listen(QHostAddress::LocalHost, <span class="number">12345</span>)) &#123;</span><br><span class="line">        qFatal(<span class="string">"Failed to open web socket server."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wrap WebSocket clients in QWebChannelAbstractTransport objects</span></span><br><span class="line">    <span class="function">WebSocketClientWrapper <span class="title">clientWrapper</span><span class="params">(&amp;server)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup the channel</span></span><br><span class="line">    QWebChannel channel;</span><br><span class="line">    QObject::connect(&amp;clientWrapper, &amp;WebSocketClientWrapper::clientConnected,</span><br><span class="line">                     &amp;channel, &amp;QWebChannel::connectTo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup the UI</span></span><br><span class="line">    Dialog dialog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup the core and publish it to the QWebChannel</span></span><br><span class="line">    <span class="function">Core <span class="title">core</span><span class="params">(&amp;dialog)</span></span>;</span><br><span class="line">    channel.registerObject(QStringLiteral(<span class="string">"core"</span>), &amp;core);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// open a browser window with the client HTML page</span></span><br><span class="line">    QUrl url = QUrl::fromLocalFile(BUILD_DIR <span class="string">"/index.html"</span>);</span><br><span class="line">    QDesktopServices::openUrl(url);</span><br><span class="line"></span><br><span class="line">    dialog.displayMessage(Dialog::tr(<span class="string">"Initialization complete, opening browser at %1."</span>).arg(url.toDisplayString()));</span><br><span class="line">    dialog.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实官方文档注释已经很清晰了，首先新建一个APP，然后连接官方提供的 <code>qwebchannel.js</code> 文件（这一步在大型项目中与示例可能不同）。</p><p>接着进入正题，开启服务器监听端口，这里是端口<code>12345</code>，如果出错（端口被占用，往往是已经有程序开启监听此端口）则发出错误信息。</p><p>然后是声明一个 QT 提供的WebSocketClientWrapper类型，它的内部还包含了一个自定义的类WebSocketTransport，这边就不进行深入剖析了，感兴趣可以自己分析一下它们的代码。</p><p>接下来是建立通道连接，声明 QT 提供的QWebChannel对象，利用connect函数将信号和槽进行连接以实现通信连接。</p><p>下面的几段代码主要涉及UI界面了，standalone 提供的是服务端使用QT界面，客户端是打开的HTML网页。</p><p>接下来的Core个人认为用处不大，因为我们实际开发中使用的是自己的界面类（比如我这次使用的是一个打印报告界面），比较重要的是需要将它发给QWebChannel，</p><p><code>channel.registerObject(QStringLiteral(&quot;core&quot;), &amp;core);</code></p><p>双引号里的字符串（名称）需要和JavaScript中使用的相同。</p><p>后面就是索引文件，打开这个页面。</p><p>最后显示服务端界面。</p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>官网示例中 JavaScript 代码直接写在HTML中，摘取如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./qwebchannel.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//BEGIN SETUP</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span><br><span class="line">        output.innerHTML = output.innerHTML + message + <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (location.search != <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">var</span> baseUrl = (<span class="regexp">/[?&amp;]webChannelBaseUrl=([A-Za-z0-9\-:/\.]+)/</span>.exec(location.search)[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">var</span> baseUrl = <span class="string">"ws://localhost:12345"</span>;</span><br><span class="line">        output(<span class="string">"Connecting to WebSocket server at "</span> + baseUrl + <span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(baseUrl);</span><br><span class="line"></span><br><span class="line">        socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"web channel closed"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"web channel error: "</span> + error);</span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            output(<span class="string">"WebSocket connected, setting up QWebChannel."</span>);</span><br><span class="line">            <span class="keyword">new</span> QWebChannel(socket, <span class="function"><span class="keyword">function</span>(<span class="params">channel</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// make core object accessible globally</span></span><br><span class="line">                <span class="built_in">window</span>.core = channel.objects.core;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"send"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>);</span><br><span class="line">                    <span class="keyword">var</span> text = input.value;</span><br><span class="line">                    <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    output(<span class="string">"Sent message: "</span> + text);</span><br><span class="line">                    input.value = <span class="string">""</span>;</span><br><span class="line">                    core.receiveText(text);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                core.sendText.connect(<span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">                    output(<span class="string">"Received message: "</span> + message);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                core.receiveText(<span class="string">"Client connected, ready to send/receive messages!"</span>);</span><br><span class="line">                output(<span class="string">"Connected to WebChannel, ready to send/receive messages!"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//END SETUP</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>其中，8-14行是建立连接，如果连接失败，就会有16-21行的报错，如果一切正常，就会显示”WebSocket connected, setting up QWebChannel.”，那么恭喜你，任务已经实现大半了，接下来就是根据 QWebChannel 来进行数据交互实现自己需要的功能了。具体的请参考上面的代码以及 JavaScript 的内容。</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>在这次建立通讯开发中我遇到的主要问题就是无法建立连接，也就是开头所写的错误：</p><p><code>&quot;WebSocket connection to &#39;ws://localhost:12345/&#39; failed: Error in connection establishment: net::ERR_CONNECTION_REFUSED&quot;</code></p><p>从三个方面进行考虑：本地、服务端、客户端。</p><p>一开始以为是监听本地端口被占用等问题，在换了几个端口并且停止本地防火墙后仍然不行，网上的解答是端口关闭，但我在专门开启本地相关端口仍然未解决。</p><p>后来靠官方示例排除了是本地原因，因为我开发是使用 Visual Studio 2017 + QT5.11，一开始不能立即很方便地运行官方示例，后来安装了一个QT Creator，发现可以直接选取 example 里面的standalone打开编译成功运行，非常的方便。</p><p>那么既然官方示例可以正常运行，看来不是电脑的问题了，将客户端完全换成官方示例的HTML文件，排除客户端。</p><p>所以问题肯定出在服务端，也就是QT代码。我又一行一行地研究代码，先努力使我的代码和官方示例尽可能地接近（包括语句顺序等等），梳理了几遍仍然不成功。</p><p>最后突然发现standalone的服务端搭建是写在 main 函数中，而我开发的代码是写在打印按钮触发函数之中，在触发结束后便会被释放，也就是说服务端会停止监听端口，难怪客户端无法建立连接！</p><p>遂更改之，终于解决问题。（其中还牵扯到一些在哪里声明如何释放内存等问题这里就不一一细说了）</p><p>这件事也给我后面开发起到了很大帮助，会更多地关注函数的生命周期，也对C++面向对象有了更深的理解，学习了用智能指针管理对象实现内存释放等等。</p><p>最后，感谢公司的二师兄对我的耐心指导！开发路还很长，我还需要向有多年经验的师兄多多学习。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>QT 5.12 官方文档： <a href="http://doc.qt.io/qt-5/qml-qtwebengine-webengineview.html" target="_blank" rel="noopener">WebEngineView QML Type</a></p><p><a href="http://doc.qt.io/qt-5/qtwebchannel-standalone-example.html" target="_blank" rel="noopener">Qt WebChannel Standalone Example</a></p><p><a href="https://blog.csdn.net/skyztttt/article/details/59166717" target="_blank" rel="noopener">跟着例子学Qt–2.standalone( C++ QWebChannel server and a HTML/JS client)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;WebSocket connection to &amp;#39;ws://localhost:12345/&amp;#39; failed: Error in connection establishment: net::ERR_CONNECTION_REFUSED&amp;quot;&lt;/code&gt;&lt;br&gt;最近在公司实习，使用QT开发需要导出分析报告，选择使用HTML&amp;amp;JS进行页面渲染，那么问题来了，如何实现 C++ QT 和 JavaScript 的通信呢？&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://blog.dongjinguo.com/categories/C/"/>
    
    
      <category term="QT" scheme="http://blog.dongjinguo.com/tags/QT/"/>
    
      <category term="C++" scheme="http://blog.dongjinguo.com/tags/C/"/>
    
      <category term="JavaScript" scheme="http://blog.dongjinguo.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 配置 Latex环境</title>
    <link href="http://blog.dongjinguo.com/2018-11-30/latexVScode/"/>
    <id>http://blog.dongjinguo.com/2018-11-30/latexVScode/</id>
    <published>2018-11-30T07:19:33.000Z</published>
    <updated>2018-11-30T09:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>latexmk: The script engine could not be found.<br>latexmk: Data: scriptEngine=”perl.exe”, scriptName=”latexmk”</p></blockquote><a id="more"></a><p><br><br>遇到这个问题后，我首先使用latex自带IDE编译文件（检查是否是MiKTeX问题）。</p><p>发现缺少许多必要的文件并且自动下载经常失败。</p><p>搜索相关问题后，自查：（在终端输入）</p><pre><code>latexmk --version</code></pre><p>显示：</p><blockquote><p>Latexmk, John Collins, 25 October 2018. Version 4.61</p></blockquote><p>没有问题，接下来打开MiKTeX-console：</p><pre><code>MiKTeX-console</code></pre><p>检查更新。<br>这时候发现存在无法连接服务器的问题，打开连接选项，选择国内的站点测试，找到一个可以连接的镜像站点。将所有需要更新的组件进行更新。</p><p>这时候，我已经可以通过使用MiKTeX自带的IDE进行latex文件的编译和PDF显示了，下一步解决文章开头的VS Code下latex编译的问题。</p><blockquote><p>latexmk: The script engine could not be found.<br>latexmk: Data: scriptEngine=”perl.exe”, scriptName=”latexmk”</p></blockquote><p>这个问题其实也很简单，没有安装perl。打开下面的网址下载安装即可。</p><p><a href="https://www.perl.org/get.html#win32" target="_blank" rel="noopener">perl</a></p><p>安装完成后重启VS Code，即可成功编译显示PDF文件，如下图：</p><p><img src="/images/latex.png" alt="VS Code and Latex"></p><p>参考链接：</p><p><a href="https://github.com/James-Yu/LaTeX-Workshop/issues/192" target="_blank" rel="noopener">https://github.com/James-Yu/LaTeX-Workshop/issues/192</a></p><p><a href="https://tex.stackexchange.com/questions/461954/latexmk-error-on-vs-code" target="_blank" rel="noopener">https://tex.stackexchange.com/questions/461954/latexmk-error-on-vs-code</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;latexmk: The script engine could not be found.&lt;br&gt;latexmk: Data: scriptEngine=”perl.exe”, scriptName=”latexmk”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="latex" scheme="http://blog.dongjinguo.com/categories/latex/"/>
    
    
      <category term="latex" scheme="http://blog.dongjinguo.com/tags/latex/"/>
    
      <category term="bug" scheme="http://blog.dongjinguo.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>由busuanzi引起的博客访问变慢</title>
    <link href="http://blog.dongjinguo.com/2018-10-09/busuanzi/"/>
    <id>http://blog.dongjinguo.com/2018-10-09/busuanzi/</id>
    <published>2018-10-08T17:33:33.000Z</published>
    <updated>2018-10-08T15:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近博客加载一直很慢，并且底部访问量统计加载不出来，是什么原因呢？<br>记一个学习HTTP协议时偶然发现并解决的问题。</p></blockquote><a id="more"></a><blockquote><p>题外话：最近在模联开发团队做一个国内高校模联团队交流平台的网站，正好学习+实战web开发。</p></blockquote><p><br></p><h1 id="1-学习HTTP调查blog问题原因"><a href="#1-学习HTTP调查blog问题原因" class="headerlink" title="1. 学习HTTP调查blog问题原因"></a>1. 学习HTTP调查blog问题原因</h1><p>使用Chrome浏览器，按F12打开开发者工具，选择Network选项（显示浏览器和服务器的通信），打开我的博客 <a href="http://blog.dongjinguo.com/">http://blog.dongjinguo.com/</a> ，这时候发现主要界面加载出来后但整个网站仍然一直处于刷新状态，将Network中的记录按照时间从长到短排序，发现第一个状态是404，链接的地址是 <a href="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js" target="_blank" rel="noopener">https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js</a> ，将其打开。</p><h1 id="2-发现busuanzi（不蒜子）"><a href="#2-发现busuanzi（不蒜子）" class="headerlink" title="2. 发现busuanzi（不蒜子）"></a>2. 发现busuanzi（不蒜子）</h1><p>打开后是如下页面：<br><img src="/images/busuanzi.png" alt="error"></p><p>把这个链接和hexo一起拖去Google一下，发现排第一的就是：“busuanzi统计挂了？”</p><p>busuanzi正好是我的博客用来统计访客数量的工具。</p><p>在下面的搜索项中发现busuanzi官网，打开：<br><img src="/images/busuan.png" alt="error"></p><blockquote><p>因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</p></blockquote><p>发现问题所在，无法解析到原来的域名导致我的博客访问过慢出错。</p><p>找到themes/next/layout/_partials目录下的footer.swig文件，将原来的域名改为新域名，成功解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近博客加载一直很慢，并且底部访问量统计加载不出来，是什么原因呢？&lt;br&gt;记一个学习HTTP协议时偶然发现并解决的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.dongjinguo.com/categories/web/"/>
    
    
      <category term="web" scheme="http://blog.dongjinguo.com/tags/web/"/>
    
      <category term="bug" scheme="http://blog.dongjinguo.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>记录web开发中遇到的问题及解决（持续更新）</title>
    <link href="http://blog.dongjinguo.com/2018-09-30/errors/"/>
    <id>http://blog.dongjinguo.com/2018-09-30/errors/</id>
    <published>2018-09-29T16:54:06.000Z</published>
    <updated>2018-10-08T14:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录建站中踩过的一些坑。<br>欢迎访问我的个人网站：<a href="http://dongjinguo.com" target="_blank" rel="noopener">dongjinguo.com</a></p></blockquote><a id="more"></a><h1 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="1. Nginx"></a>1. Nginx</h1><h2 id="Nginx-502-Bad-Gateway"><a href="#Nginx-502-Bad-Gateway" class="headerlink" title="Nginx 502 Bad Gateway"></a>Nginx 502 Bad Gateway</h2><p>这个问题找了好久才解决，从中文到英文都查、试了个遍，发现我这边是php-fpm版本不一问题。<br>首先检查/var/log/nginx中的错误日志，发现如下错误：<br>unix:/run/php/php7.0-fpm.sock failed (13: Permission denied) while connecting to upstream<br>检查发现服务器php版本是7.2，于是修改Nginx配置文件把7.0更改为7.2最终解决。</p><pre><code>vim /etc/nginx/sites-available/default</code></pre><p>中间确实饶了不少弯，其实配置时候即使根据教程也应该更仔细一点。<br><br></p><h1 id="2-WordPress"><a href="#2-WordPress" class="headerlink" title="2. WordPress"></a>2. WordPress</h1><h2 id="Error-establishing-a-database-connection"><a href="#Error-establishing-a-database-connection" class="headerlink" title="Error establishing a database connection"></a>Error establishing a database connection</h2><p>连接数据库出错，折腾了很久MySQL最后发现其实是wordpress配置文件问题：</p><pre><code>vi /root/wordpress/wp-config.php</code></pre><p>经过对比发现是用户名多写了@localhost<br>正确的配置图片如下：<br><img src="/images/wp-config.png" alt="WordPress配置"><br><br></p><h2 id="图片剪裁问题"><a href="#图片剪裁问题" class="headerlink" title="图片剪裁问题"></a>图片剪裁问题</h2><p>问题：在WordPress中使用裁剪图片功能时，出现:“在裁剪您的图像时发生了错误。” 或者 ”There has been an error cropping your image.”</p><p>原因：缺少PHP GD库。</p><p>Ubuntu下运行：</p><pre><code>sudo apt-get install php5-gd</code></pre><p>Linux 下运行：</p><pre><code>yun install php-gd</code></pre><p>然后重启nginx即可。</p><pre><code>service nginx restart</code></pre><p>原因分析：</p><p>没有GD库，会失去的功能；<br>这些涉及图片处理的功能都需要GD库<br>– 图片水印<br>– 缩略图<br>– 验证码</p><p>参考：<br><a href="https://blog.csdn.net/coderPark/article/details/50097025" target="_blank" rel="noopener">https://blog.csdn.net/coderPark/article/details/50097025</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录建站中踩过的一些坑。&lt;br&gt;欢迎访问我的个人网站：&lt;a href=&quot;http://dongjinguo.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dongjinguo.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.dongjinguo.com/categories/web/"/>
    
    
      <category term="web" scheme="http://blog.dongjinguo.com/tags/web/"/>
    
      <category term="WordPress" scheme="http://blog.dongjinguo.com/tags/WordPress/"/>
    
      <category term="Nginx" scheme="http://blog.dongjinguo.com/tags/Nginx/"/>
    
      <category term="bug" scheme="http://blog.dongjinguo.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>快速建站经历</title>
    <link href="http://blog.dongjinguo.com/2018-09-25/WebStation/"/>
    <id>http://blog.dongjinguo.com/2018-09-25/WebStation/</id>
    <published>2018-09-24T16:16:47.000Z</published>
    <updated>2018-09-30T11:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录一次简单建站经历，算是第一次正经地建站。适合新手尝试。<br>2018.9.29更新 基于Nginx部署WordPress</p></blockquote><a id="more"></a><h1 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1. 服务器"></a><font color="#00008B" size="4">1. 服务器</font></h1><p>首先是租用服务器，我用的一个是阿里云，另外一个是国外的vultr，各有各的优点，这里就不细说了。</p><p><a href="https://promotion.aliyun.com/ntms/act/xsgroup/buy.html?group=fi99mrShFx" target="_blank" rel="noopener">阿里云服务器学生计划</a></p><p>如果想要租vultr服务器建议注册前先搜下他家的优惠活动。</p><p><br></p><h1 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a><font color="#00008B" size="4">2. 域名</font></h1><p>用自己名字注册了两个域名，国内注册的域名因为现在在国外不方便备案，所以现在使用的是在国外注册的域名。<br><a href="http://dongjinguo.com/" target="_blank" rel="noopener">dongjinguo.com</a><br>其实域名相当于网站的一个名字，可以方便访问，但如果只是自己实验玩玩也可以不用买域名。<br>国内域名一定要备案，不然会被直接拦截。<br><a href="http://djinguo.com/" target="_blank" rel="noopener">参考djinguo.com</a><br>如果国外的域名商有提供收费的whois服务，不太建议在他家买……因为我注册第一天邮箱就源源不断的收到了很多web开发商的广告。部分信息不一定填写真实信息。</p><p><br></p><h1 id="3-搭建过程"><a href="#3-搭建过程" class="headerlink" title="3. 搭建过程"></a><font color="#00008B" size="4">3. 搭建过程</font></h1><h2 id="3-1-安装apache"><a href="#3-1-安装apache" class="headerlink" title="3.1 安装apache"></a><font color="#00FFFF" size="3">3.1 安装apache</font></h2><p>首先连接租用的服务器，工具可以使用Xshell或者PuTTY，连接成功后，依次输入下面的命令，注意不是一骨碌全输进去，而是一句一句输入，输完一句回车就行了，如果让你选择y/n那就选择y（yes）</p><pre><code>apt-get update apt-get install apache2 service apache2 restart2   </code></pre><h2 id="3-2-安装php"><a href="#3-2-安装php" class="headerlink" title="3.2 安装php"></a><font color="#00FFFF" size="3">3.2 安装php</font></h2><pre><code>apt-get install php</code></pre><h2 id="3-3-安装mysql"><a href="#3-3-安装mysql" class="headerlink" title="3.3 安装mysql"></a><font color="#00FFFF" size="3">3.3 安装mysql</font></h2><pre><code>apt-get install mysql-server mysql-client </code></pre><p>中途会让设置密码，<br>然后就可以</p><pre><code>service mysql start</code></pre><p>最后，重启apache服务</p><pre><code>service apache2 restart</code></pre><p>到了这一步就可以在浏览器输入ip访问网站了。<br>例如：<br><a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br>现在的访问页面是服务器的默认界面，然后怎么更改成想要的页面呢？<br><br></p><h1 id="4-上传网站文件"><a href="#4-上传网站文件" class="headerlink" title="4. 上传网站文件"></a><font color="#00008B" size="4">4. 上传网站文件</font></h1><p>下载FileZilla Client或者WinSCP，连接之后进入/var/www/html目录，这个目录下有个index.html文件，替换成需要的index.html文件就行了，因为默认的接受index.html。<br><br><br>我一开始是从网上找了一个模板打包上传修改（这里安利下Sublime Text的SFTP/FTP插件，与服务器同步很方便），现在在学习WordPress。</p><h1 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a><font color="#00008B" size="4">5. 参考资料</font></h1><p>本次建站参考了知乎·糯糕团子的回答，以下是答案链接：<br>链接：<a href="https://www.zhihu.com/question/19774219/answer/160639566" target="_blank" rel="noopener">https://www.zhihu.com/question/19774219/answer/160639566</a></p><hr><h1 id="2018-9-29更新-基于Nginx部署WordPress"><a href="#2018-9-29更新-基于Nginx部署WordPress" class="headerlink" title="2018.9.29更新 基于Nginx部署WordPress"></a>2018.9.29更新 基于Nginx部署WordPress</h1><blockquote><p>Nginx（发音同engine x）是一个异步框架的 Web服务器，也可以用作反向代理，负载平衡器 和 HTTP缓存。<br>Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，Nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑从而削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，Nginx使用epoll事件模型，得益于此，Nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。（摘自维基百科）</p></blockquote><p>在前文已有基础上搭建（包括PHP、MySql）<br><br></p><h2 id="Ubuntu安装Nginx"><a href="#Ubuntu安装Nginx" class="headerlink" title="Ubuntu安装Nginx"></a>Ubuntu安装Nginx</h2><pre><code>apt-get updateapt-get install nginx      </code></pre><p><br></p><h2 id="配置Nginx使用PHP"><a href="#配置Nginx使用PHP" class="headerlink" title="配置Nginx使用PHP"></a>配置Nginx使用PHP</h2><p>根据下图修改Nginx的server block configuration：</p><pre><code>vim /etc/nginx/sites-available/default</code></pre><p><img src="/images/nginx-default.png" alt="nginx-default"></p><p>验证配置文件有没有错误：</p><pre><code>nginx -t</code></pre><p>重启Nginx：</p><pre><code>/etc/init.d/nginx restart</code></pre><h2 id="下载WordPress"><a href="#下载WordPress" class="headerlink" title="下载WordPress"></a>下载WordPress</h2><p>通过wget命令官网下载最新的版本：</p><pre><code>wget http://wordpress.org/latest.tar.gz</code></pre><p>解压：</p><pre><code>tar -xzvf latest.tar.gz</code></pre><h2 id="创建WordPress操作的数据库和用户"><a href="#创建WordPress操作的数据库和用户" class="headerlink" title="创建WordPress操作的数据库和用户"></a>创建WordPress操作的数据库和用户</h2><p>登录MySQ：</p><pre><code>mysql -u root -p</code></pre><p>创建数据库：</p><pre><code>CREATE DATABASE wordpress;</code></pre><p>创建用户：</p><pre><code>CREATE USER wordpress@localhost;</code></pre><p>设置密码：</p><pre><code>SET PASSWORD FOR wordpress@localhost=PASSWORD(&quot;your password&quot;);</code></pre><p>配置权限：</p><pre><code>GRANT ALL PRIVILEGES ON wordpress.* TO wordpress@localhost IDENTIFIED BY &apos;your password&apos;;</code></pre><p>刷新权限配置：</p><pre><code>FLUSH PRIVILEGES;</code></pre><p>退出MySQL：</p><pre><code>QUIT;</code></pre><h2 id="配置WordPress"><a href="#配置WordPress" class="headerlink" title="配置WordPress"></a>配置WordPress</h2><p>重命名示例文件wp-config（此处的路径/root/wordpress对应自己的存放路径）：</p><pre><code>mv /root/wordpress/wp-config-sample.php /root/wordpress/wp-config.php</code></pre><p>修改配置文件内容：</p><pre><code>vi /root/wordpress/wp-config.php</code></pre><p>修改的内容包括DB_NAME，DB_USER，DB_PASSWORD以及下面的唯一key，其中前三个是在上一步中设置的内容，唯一key可以直接在提供的链接打开拷贝，修改后的文件如下所示：</p><p><img src="/images/wp-config.png" alt="WordPress配置"></p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>拷贝WordPress：</p><pre><code>cp -r /root/wordpress/* /var/www/html</code></pre><p>修改权限（Nginx默认是www-data用户来运行，所以没有权限写入root的文件）：</p><pre><code>chown -R www-data:www-data /var/www/html</code></pre><p>重启Nginx：</p><pre><code>/etc/init.d/nginx restart</code></pre><p>搞定之后访问域名或者IP地址就可以看到WordPress了~ 下面根据提示进行操作就可以了~</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一次简单建站经历，算是第一次正经地建站。适合新手尝试。&lt;br&gt;2018.9.29更新 基于Nginx部署WordPress&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://blog.dongjinguo.com/categories/web/"/>
    
    
      <category term="建站" scheme="http://blog.dongjinguo.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="web" scheme="http://blog.dongjinguo.com/tags/web/"/>
    
      <category term="WordPress" scheme="http://blog.dongjinguo.com/tags/WordPress/"/>
    
      <category term="Nginx" scheme="http://blog.dongjinguo.com/tags/Nginx/"/>
    
      <category term="Apache" scheme="http://blog.dongjinguo.com/tags/Apache/"/>
    
      <category term="PHP" scheme="http://blog.dongjinguo.com/tags/PHP/"/>
    
      <category term="MySql" scheme="http://blog.dongjinguo.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>QQ机器人搭建教程</title>
    <link href="http://blog.dongjinguo.com/2018-09-23/qqbot/"/>
    <id>http://blog.dongjinguo.com/2018-09-23/qqbot/</id>
    <published>2018-09-22T16:11:18.000Z</published>
    <updated>2018-12-27T02:56:33.677Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实很早就打算写这个简易教程了，一方面对这个项目做一个总结，另一方面虽然现在网上有很多的QQ机器人教程，但其实实现起来都有一点难度，尤其是对于一些缺乏编程基础的同学。希望这个教程可以实现小白也能搭建自己的QQbot，也算是给运营小雷锋、帮帮酱的联盟热心小伙伴们的一个答复。</p></blockquote><p>2018.10.1 插件并入pandolia/qqbot，第一次成为contributer。<br><img src="/images/qqbot.png" alt="merge"><br><br></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><font color="#FF7F50">目录</font></h2><ol><li>qqbot项目总结回顾</li><li>qqbot搭建教程<ul><li>2.1 安装python</li><li>2.2 安装qqbot</li><li>2.3 配置登录</li><li>2.4 搭建自动回复问题库</li><li>2.5 服务器上线</li></ul></li><li>参考资料</li><li>反馈</li><li>项目展望<br><br></li></ol><a id="more"></a><h2 id="1-qqbot项目总结回顾"><a href="#1-qqbot项目总结回顾" class="headerlink" title="1. qqbot项目总结回顾"></a>1. qqbot项目总结回顾</h2><p>这一段基本上回顾一下我做QQ机器人的过程经历，也算是一个我的QQ机器人的更新历史吧。</p><ul><li>记得最早是大一暑假在知乎上看到QQ机器人这个项目的，然后自己也找了一些网上的教程（很遗憾刚刚又Google了一下没有找到当初借鉴最多的一篇教程），其实方法也挺多的，我使用的是GitHub上的开源项目qqbot，在写作本文时已有2957 star。</li></ul><p>大一暑假使用QQ机器人进行电视台招新宣传，搭建在QQ号电视台小V上，实现好友<font color="#FF4500">300+</font>，招新群新生人数<font color="#FF4500">200+</font>。 当时经常水群的同学应该都对小V印象深刻，因为通过关键词检测，小V不仅可以自动回答新生们对电视台的相关问题，还会在很多时候自动向新生宣传电视台（比如其他社团发布广告时候），甚至因为机器人社联群几度踢出小V。</p><p>当时的QQ机器人功能已经比较丰富了，并且通过接入图灵机器人API接口可以与人进行聊天对话、天气预报、成语接龙等，以及通过运行在阿里云服务器上实现24h在线。不过因为通过代码中的关键词检测，实现的插件代码显得很臃肿（很多if-else语句）。于是产生使用文件操作通过读文件操作回答问题。</p><ul><li>因为招新工作的结束以及参加一些比赛，QQ机器人搁置了很久。直到第二年夏天，在和瓜大小雷锋QQ运营小伙伴们开会时重启，希望通过QQ机器人解决人工小雷锋无法快速回复一些重复问题的问题。</li></ul><p>于是，QQ机器人被搭载在了小雷锋QQ号上。这次我做的工作主要分为三个阶段：</p><ol><li>将问题库存储在单独的文件中，此时只有同学们发出单独的关键词可能触发相关问题的自动回复；</li><li>基于jieba分词项目，自动提取语句中的关键词，针对询问句触发相关问题回答；</li><li>实现可以通过QQ消息添加问题库QA，并且有需要的同学可以停止小雷锋的自动回复。</li></ol><p>小雷锋QQ号目前好友<font color="#FF4500">1800+</font>，QQ机器人对快速解决同学们常见问题带来了很大帮助。目前在策划一场活动来鼓励学校同学们主动丰富小雷锋问题库，以实现无论什么问题，只要有同学遇到过，都可以通过小雷锋自动解决。</p><p><br></p><h2 id="2-qqbot搭建教程"><a href="#2-qqbot搭建教程" class="headerlink" title="2. qqbot搭建教程"></a>2. qqbot搭建教程</h2><blockquote><p>总的来说，可以概括为：<font color="#00008B" size="4">安装python、安装qqbot、下载插件并运行。</font></p></blockquote><ul><li>2.1 <font color="#00008B" size="4">安装python</font></li></ul><p>qqbot支持Python 2.7/3.4+ 下使用，因为我后面插件的代码使用的是python3，所以建议下载python3，具体的网上教程很多，主要是修改系统路径可能对小白有点困难，下面是随便找的一篇安装教程：<br><a href="https://www.jianshu.com/p/384e02ed99f8" target="_blank" rel="noopener">python3安装教程</a></p><ul><li>2.2 <font color="#00008B" size="4">安装qqbot</font></li></ul><p>最快捷的方法是使用pip安装：</p><pre><code>pip install qqbot</code></pre><p>也可以下载源码解压后cd到该目录并运行：pip install</p><ul><li>2.3 <font color="#00008B" size="4">配置登录</font></li></ul><p>理论上安装好之后就可以扫码登录QQ机器人了。</p><blockquote><p>Win+R输入cmd打开命令行输入qqbot可以扫码登录</p></blockquote><p>但是这时候还不能自动回复，需要通过插件进行自动回复。</p><p><a href="https://github.com/femj007/qqbot/blob/master/qqbot/plugins/leifeng.py" target="_blank" rel="noopener"><font color="#FF4500" size="5">leifeng插件下载</font></a><br>（如果可以的话给我点颗star支持下新人谢谢~</p><p>这个是最成熟的一版，集成了保存聊天记录、添加问题、停止自动回复、自动聊天等，但需要修改一下相关的路径，包括问题库列表、聊天记录保存路径等，代码上的是在我服务器上的路径。</p><p>如果仅仅想实现自动聊天功能也可以下载下面这个更简单的插件：</p><p><a href="https://github.com/femj007/qqbot/blob/master/qqbot/plugins/xiaoV.py" target="_blank" rel="noopener"><font color="#FF4500" size="5">smallV自动聊天插件下载</font></a></p><p>其中，有一个key值需要从图灵机器人网站注册创建机器人获得，并填入相关位置（插件第8行）</p><p><a href="www.tuling123.com">图灵机器人网站</a></p><p>注册创建就不说了，跟着步骤走，最后点击你创建好的机器人，找到API中的key：</p><p><img src="/images/tulin.png" alt="key"></p><p>最后，保存文件以后，只需要编译运行这个插件文件就可以扫码登录你的QQ机器人了~</p><ul><li>2.4 <font color="#00008B" size="4">搭建自动回复问题库</font></li></ul><p>其实在上面的leifeng.py中已经实现，问题列表格式可以参考下面的文件：</p><p><a href="https://github.com/femj007/qqbot/blob/question_list/qa.txt" target="_blank" rel="noopener">qa.txt</a></p><p>这里使用的是很朴素的方法，就是通过python读写文件操作，因为一直没有很系统地学习过python，实现这个对我python文件操作学习提高很大。</p><ul><li>2.5 <font color="#00008B" size="4">服务器上线</font></li></ul><p>通过前面的步骤你已经可以在自己的电脑上运行QQ机器人了，但是自己的电脑一般不会24h开机，所以就需要架设到服务器上。</p><p>一般来说我们买不起服务器，租用价格对于学生过高，这里推荐阿里云的学生计划比较便宜：</p><p><a href="https://promotion.aliyun.com/ntms/act/xsgroup/buy.html?group=fi99mrShFx" target="_blank" rel="noopener"><font color="#FF4500" size="5">阿里云服务器学生计划</font></a></p><p>具体架设过程其实与在自己电脑上架设没有什么太大区别（windows主机），Linux服务器也可以正常搭建（区别可以参照qqbot的README文档），我现在使用的就是Linux服务器，对自己学习操作系统也有帮助。</p><p><br></p><h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h2><p>本项目参考了下列开源项目，感谢作者们的无私奉献！</p><p><a href="https://github.com/pandolia/qqbot" target="_blank" rel="noopener"><font color="#FF4500" size="5">pandolia/qqbot</font></a></p><p><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener"><font color="#FF4500" size="5">fxsjy/jieba</font></a></p><p><br></p><h2 id="4-反馈"><a href="#4-反馈" class="headerlink" title="4. 反馈"></a>4. 反馈</h2><p>如果存在问题，请发邮件至：<a href="mailto:dong.jinguo@outlook.com" target="_blank" rel="noopener">dong.jinguo@outlook.com</a></p><p><br></p><h2 id="5-项目展望"><a href="#5-项目展望" class="headerlink" title="5. 项目展望"></a>5. 项目展望</h2><p>其实QQ机器人目前还有许多不足的地方，首先是暂时无解的webQQ停止维护而导致的一些功能丧失，和需要定期扫码登录。</p><p>接着是小雷锋机器人实际应用中的一些问题，比如说语义分析，有可能遇到题库中的问题不能正确判断，或者是误触发。目前是使用的jieba分词中的算法加上一些自己的处理，这个问题打算在以后对语义分析进一步研究时进行解决。</p><p>还有使用python读写文件的操作进行题库读取整理效率不高（或者说感觉比较low），考虑可以通过建立数据库来优化。</p><p>在进一步的项目研究中，对于调用别人的API聊天对话也产生了一点兴趣，查到了一些机器自动应答的开源项目，后期可能会尝试这个领域。</p><p>作为我的第一篇博客，还想多说两句，当初知乎看到QQ机器人的时候并没想到这么多，可能想到招新，想到妹纸（很遗憾身边的女生对它兴趣不大），但没想到可以走这么多，提高了python水平，接触了服务器，入门了GitHub，甚至为了写教程开启了我的博客学会了markdown。</p><p>其实现在很感激父母，让我有机会通过2+2走出来，脱离原来的舒适圈，对如何更好地提高自己可以有更多思考与实践。</p><font color="#9ACD32">本文写于2018年9月23日，作为对2018年8月小项目的总结。</font>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实很早就打算写这个简易教程了，一方面对这个项目做一个总结，另一方面虽然现在网上有很多的QQ机器人教程，但其实实现起来都有一点难度，尤其是对于一些缺乏编程基础的同学。希望这个教程可以实现小白也能搭建自己的QQbot，也算是给运营小雷锋、帮帮酱的联盟热心小伙伴们的一个答复。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2018.10.1 插件并入pandolia/qqbot，第一次成为contributer。&lt;br&gt;&lt;img src=&quot;/images/qqbot.png&quot; alt=&quot;merge&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#FF7F50&quot;&gt;目录&lt;/font&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;qqbot项目总结回顾&lt;/li&gt;
&lt;li&gt;qqbot搭建教程&lt;ul&gt;
&lt;li&gt;2.1 安装python&lt;/li&gt;
&lt;li&gt;2.2 安装qqbot&lt;/li&gt;
&lt;li&gt;2.3 配置登录&lt;/li&gt;
&lt;li&gt;2.4 搭建自动回复问题库&lt;/li&gt;
&lt;li&gt;2.5 服务器上线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考资料&lt;/li&gt;
&lt;li&gt;反馈&lt;/li&gt;
&lt;li&gt;项目展望&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.dongjinguo.com/categories/Python/"/>
    
    
      <category term="qqbot" scheme="http://blog.dongjinguo.com/tags/qqbot/"/>
    
      <category term="Python" scheme="http://blog.dongjinguo.com/tags/Python/"/>
    
      <category term="语义分析" scheme="http://blog.dongjinguo.com/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
